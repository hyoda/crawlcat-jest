{{#if options.includeComments}}
/**
 * {{metadata.description}}
 * 
 * Generated at: {{metadata.generatedAt}}
 * Generator: {{metadata.generator}} v{{metadata.version}}
 * Source: Crawled product data ({{products.length}} products)
 */
{{/if}}

import React, { useState, useEffect, useMemo } from 'react';
import './ProductList.css';

{{#if options.includeTypes}}
interface ProductInfo {
  id?: string;
  title: string;
  price: number;
  originalPrice?: number;
  currency: string;
  rating: number;
  reviewCount: number;
  availability: string;
  imageUrl: string;
  description?: string;
  brand?: string;
  category?: string;
  discount?: number;
  url?: string;
  extractedAt: string;
}

interface ProductListProps {
  searchTerm?: string;
  categoryFilter?: string;
  brandFilter?: string;
  minPrice?: number;
  maxPrice?: number;
  minRating?: number;
  sortBy?: 'price' | 'rating' | 'title' | 'discount';
  sortOrder?: 'asc' | 'desc';
  itemsPerPage?: number;
  showFilters?: boolean;
  onProductClick?: (product: ProductInfo) => void;
}

interface FilterState {
  searchTerm: string;
  category: string;
  brand: string;
  minPrice: string;
  maxPrice: string;
  minRating: number;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}
{{/if}}

const ProductList: React.FC<ProductListProps> = ({
  searchTerm: propSearchTerm = '',
  categoryFilter = '',
  brandFilter = '',
  minPrice,
  maxPrice,
  minRating = 0,
  sortBy = 'rating',
  sortOrder = 'desc',
  itemsPerPage = 12,
  showFilters = true,
  onProductClick
}) => {
  const [products] = useState<ProductInfo[]>([
    {{#each products}}
    {
      id: '{{@index}}',
      title: {{json title}},
      price: {{price}},
      {{#if originalPrice}}
      originalPrice: {{originalPrice}},
      {{/if}}
      currency: {{json currency}},
      rating: {{rating}},
      reviewCount: {{reviewCount}},
      availability: {{json availability}},
      imageUrl: {{json imageUrl}},
      {{#if description}}
      description: {{json (truncate description 150)}},
      {{/if}}
      {{#if brand}}
      brand: {{json brand}},
      {{/if}}
      {{#if category}}
      category: {{json category}},
      {{/if}}
      {{#if discount}}
      discount: {{discount}},
      {{/if}}
      {{#if url}}
      url: {{json url}},
      {{/if}}
      extractedAt: {{json extractedAt}}
    }{{#unless @last}},{{/unless}}
    {{/each}}
  ]);

  const [filters, setFilters] = useState<FilterState>({
    searchTerm: propSearchTerm,
    category: categoryFilter,
    brand: brandFilter,
    minPrice: minPrice?.toString() || '',
    maxPrice: maxPrice?.toString() || '',
    minRating: minRating,
    sortBy: sortBy,
    sortOrder: sortOrder
  });

  const [currentPage, setCurrentPage] = useState(1);
  const [loading, setLoading] = useState(false);

  {{#if options.includeComments}}
  // Extract unique values for filter dropdowns
  {{/if}}
  const filterOptions = useMemo(() => {
    const categories = [...new Set(products.map(p => p.category).filter(Boolean))].sort();
    const brands = [...new Set(products.map(p => p.brand).filter(Boolean))].sort();
    
    return { categories, brands };
  }, [products]);

  {{#if options.includeComments}}
  // Filter and sort products based on current filters
  {{/if}}
  const filteredProducts = useMemo(() => {
    let filtered = [...products];

    // Apply search filter
    if (filters.searchTerm) {
      const searchTerm = filters.searchTerm.toLowerCase();
      filtered = filtered.filter(product =>
        product.title.toLowerCase().includes(searchTerm) ||
        product.description?.toLowerCase().includes(searchTerm) ||
        product.brand?.toLowerCase().includes(searchTerm) ||
        product.category?.toLowerCase().includes(searchTerm)
      );
    }

    // Apply category filter
    if (filters.category) {
      filtered = filtered.filter(product => product.category === filters.category);
    }

    // Apply brand filter
    if (filters.brand) {
      filtered = filtered.filter(product => product.brand === filters.brand);
    }

    // Apply price filters
    if (filters.minPrice) {
      filtered = filtered.filter(product => product.price >= parseFloat(filters.minPrice));
    }
    if (filters.maxPrice) {
      filtered = filtered.filter(product => product.price <= parseFloat(filters.maxPrice));
    }

    // Apply rating filter
    if (filters.minRating > 0) {
      filtered = filtered.filter(product => product.rating >= filters.minRating);
    }

    // Apply sorting
    filtered.sort((a, b) => {
      let aVal: any = a[filters.sortBy as keyof ProductInfo];
      let bVal: any = b[filters.sortBy as keyof ProductInfo];

      if (typeof aVal === 'string') {
        aVal = aVal.toLowerCase();
        bVal = bVal.toLowerCase();
      }

      if (filters.sortOrder === 'desc') {
        return bVal > aVal ? 1 : -1;
      } else {
        return aVal > bVal ? 1 : -1;
      }
    });

    return filtered;
  }, [products, filters]);

  {{#if options.includeComments}}
  // Pagination logic
  {{/if}}
  const paginatedProducts = useMemo(() => {
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    return filteredProducts.slice(startIndex, endIndex);
  }, [filteredProducts, currentPage, itemsPerPage]);

  const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);

  {{#if options.includeComments}}
  // Handle filter changes
  {{/if}}
  const handleFilterChange = (key: keyof FilterState, value: string | number) => {
    setFilters(prev => ({ ...prev, [key]: value }));
    setCurrentPage(1); // Reset to first page when filters change
  };

  const handleProductClick = (product: ProductInfo) => {
    if (onProductClick) {
      onProductClick(product);
    } else if (product.url) {
      window.open(product.url, '_blank');
    }
  };

  const formatPrice = (price: number, currency: string) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: currency || 'USD'
    }).format(price);
  };

  const renderStars = (rating: number) => {
    const stars = [];
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 >= 0.5;

    for (let i = 0; i < fullStars; i++) {
      stars.push(<span key={i} className="star full">★</span>);
    }

    if (hasHalfStar) {
      stars.push(<span key="half" className="star half">★</span>);
    }

    const emptyStars = 5 - Math.ceil(rating);
    for (let i = 0; i < emptyStars; i++) {
      stars.push(<span key={`empty-${i}`} className="star empty">☆</span>);
    }

    return stars;
  };

  return (
    <div className="product-list-container">
      {showFilters && (
        <div className="filters-section">
          <div className="filters-row">
            <div className="filter-group">
              <label htmlFor="search">Search</label>
              <input
                id="search"
                type="text"
                placeholder="Search products..."
                value={filters.searchTerm}
                onChange={(e) => handleFilterChange('searchTerm', e.target.value)}
              />
            </div>

            <div className="filter-group">
              <label htmlFor="category">Category</label>
              <select
                id="category"
                value={filters.category}
                onChange={(e) => handleFilterChange('category', e.target.value)}
              >
                <option value="">All Categories</option>
                {filterOptions.categories.map(category => (
                  <option key={category} value={category}>{category}</option>
                ))}
              </select>
            </div>

            <div className="filter-group">
              <label htmlFor="brand">Brand</label>
              <select
                id="brand"
                value={filters.brand}
                onChange={(e) => handleFilterChange('brand', e.target.value)}
              >
                <option value="">All Brands</option>
                {filterOptions.brands.map(brand => (
                  <option key={brand} value={brand}>{brand}</option>
                ))}
              </select>
            </div>
          </div>

          <div className="filters-row">
            <div className="filter-group">
              <label htmlFor="minPrice">Min Price</label>
              <input
                id="minPrice"
                type="number"
                placeholder="0"
                value={filters.minPrice}
                onChange={(e) => handleFilterChange('minPrice', e.target.value)}
              />
            </div>

            <div className="filter-group">
              <label htmlFor="maxPrice">Max Price</label>
              <input
                id="maxPrice"
                type="number"
                placeholder="No limit"
                value={filters.maxPrice}
                onChange={(e) => handleFilterChange('maxPrice', e.target.value)}
              />
            </div>

            <div className="filter-group">
              <label htmlFor="minRating">Min Rating</label>
              <select
                id="minRating"
                value={filters.minRating}
                onChange={(e) => handleFilterChange('minRating', parseFloat(e.target.value))}
              >
                <option value={0}>Any Rating</option>
                <option value={1}>1+ Stars</option>
                <option value={2}>2+ Stars</option>
                <option value={3}>3+ Stars</option>
                <option value={4}>4+ Stars</option>
                <option value={4.5}>4.5+ Stars</option>
              </select>
            </div>

            <div className="filter-group">
              <label htmlFor="sortBy">Sort By</label>
              <select
                id="sortBy"
                value={filters.sortBy}
                onChange={(e) => handleFilterChange('sortBy', e.target.value)}
              >
                <option value="rating">Rating</option>
                <option value="price">Price</option>
                <option value="title">Name</option>
                <option value="discount">Discount</option>
              </select>
            </div>

            <div className="filter-group">
              <label htmlFor="sortOrder">Order</label>
              <select
                id="sortOrder"
                value={filters.sortOrder}
                onChange={(e) => handleFilterChange('sortOrder', e.target.value as 'asc' | 'desc')}
              >
                <option value="desc">High to Low</option>
                <option value="asc">Low to High</option>
              </select>
            </div>
          </div>
        </div>
      )}

      <div className="results-info">
        <p>
          Showing {paginatedProducts.length} of {filteredProducts.length} products
          {filters.searchTerm && ` for "${filters.searchTerm}"`}
        </p>
      </div>

      {loading ? (
        <div className="loading">Loading products...</div>
      ) : (
        <>
          <div className="products-grid">
            {paginatedProducts.map((product, index) => (
              <div
                key={product.id || index}
                className="product-card"
                onClick={() => handleProductClick(product)}
              >
                <div className="product-image">
                  <img
                    src={product.imageUrl || '/placeholder-image.jpg'}
                    alt={product.title}
                    onError={(e) => {
                      (e.target as HTMLImageElement).src = '/placeholder-image.jpg';
                    }}
                  />
                  {product.discount && product.discount > 0 && (
                    <div className="discount-badge">
                      -{product.discount}%
                    </div>
                  )}
                </div>

                <div className="product-info">
                  <h3 className="product-title" title={product.title}>
                    {product.title}
                  </h3>

                  {product.brand && (
                    <p className="product-brand">{product.brand}</p>
                  )}

                  <div className="product-rating">
                    <div className="stars">
                      {renderStars(product.rating)}
                    </div>
                    <span className="rating-text">
                      {product.rating.toFixed(1)} ({formatNumber(product.reviewCount)} reviews)
                    </span>
                  </div>

                  <div className="product-price">
                    <span className="current-price">
                      {formatPrice(product.price, product.currency)}
                    </span>
                    {product.originalPrice && product.originalPrice > product.price && (
                      <span className="original-price">
                        {formatPrice(product.originalPrice, product.currency)}
                      </span>
                    )}
                  </div>

                  <div className={`availability ${product.availability.toLowerCase().includes('stock') ? 'in-stock' : 'out-of-stock'}`}>
                    {product.availability}
                  </div>

                  {product.description && (
                    <p className="product-description">
                      {product.description}
                    </p>
                  )}
                </div>
              </div>
            ))}
          </div>

          {totalPages > 1 && (
            <div className="pagination">
              <button
                onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
                disabled={currentPage === 1}
              >
                Previous
              </button>

              <div className="page-numbers">
                {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                  const pageNum = Math.max(1, Math.min(totalPages - 4, currentPage - 2)) + i;
                  return (
                    <button
                      key={pageNum}
                      onClick={() => setCurrentPage(pageNum)}
                      className={currentPage === pageNum ? 'active' : ''}
                    >
                      {pageNum}
                    </button>
                  );
                })}
              </div>

              <button
                onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}
                disabled={currentPage === totalPages}
              >
                Next
              </button>
            </div>
          )}
        </>
      )}
    </div>
  );
};

export default ProductList;